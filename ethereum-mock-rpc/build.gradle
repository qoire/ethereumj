/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */

plugins {
    // lombok, for code generation
    id 'io.franzbecker.gradle-lombok' version '1.14'

    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

lombok {
    version = '1.18.2'
    sha256 = "" // skip verification
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

// Define the main class for the application
mainClassName = 'org.aion.mock.MockRpcServer'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'com.sun.xml.bind:jaxb-core:2.2.11'
    compile 'com.sun.xml.bind:jaxb-impl:2.2.11'
    compile 'javax.xml.ws:jaxws-api:2.2.11'

    compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.3"
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
    compile group: 'com.madgag.spongycastle', name: 'core', version: '1.58.0.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // jetty, embedded servlet
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.12.RC1'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.RC1'
    compile group: 'javax.portlet', name: 'portlet-api', version: '3.0.1'

    compile project(":ethereumj-core")

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    classifier = 'all'
    manifest {
        attributes 'Main-Class' : mainClassName
        attributes 'Class-Path' : configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
